/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.tsb.ods.sys.api.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DocConfigOp extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2711199866732515275L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DocConfigOp\",\"namespace\":\"com.tsb.ods.sys.api.schema\",\"fields\":[{\"name\":\"application\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"correspondence\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"statements\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DocConfigOp> ENCODER =
      new BinaryMessageEncoder<DocConfigOp>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DocConfigOp> DECODER =
      new BinaryMessageDecoder<DocConfigOp>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DocConfigOp> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DocConfigOp> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DocConfigOp> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DocConfigOp>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DocConfigOp to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DocConfigOp from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DocConfigOp instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DocConfigOp fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String application;
  private java.lang.String correspondence;
  private java.lang.String statements;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DocConfigOp() {}

  /**
   * All-args constructor.
   * @param application The new value for application
   * @param correspondence The new value for correspondence
   * @param statements The new value for statements
   */
  public DocConfigOp(java.lang.String application, java.lang.String correspondence, java.lang.String statements) {
    this.application = application;
    this.correspondence = correspondence;
    this.statements = statements;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return application;
    case 1: return correspondence;
    case 2: return statements;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: application = value$ != null ? value$.toString() : null; break;
    case 1: correspondence = value$ != null ? value$.toString() : null; break;
    case 2: statements = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'application' field.
   * @return The value of the 'application' field.
   */
  public java.lang.String getApplication() {
    return application;
  }


  /**
   * Sets the value of the 'application' field.
   * @param value the value to set.
   */
  public void setApplication(java.lang.String value) {
    this.application = value;
  }

  /**
   * Gets the value of the 'correspondence' field.
   * @return The value of the 'correspondence' field.
   */
  public java.lang.String getCorrespondence() {
    return correspondence;
  }


  /**
   * Sets the value of the 'correspondence' field.
   * @param value the value to set.
   */
  public void setCorrespondence(java.lang.String value) {
    this.correspondence = value;
  }

  /**
   * Gets the value of the 'statements' field.
   * @return The value of the 'statements' field.
   */
  public java.lang.String getStatements() {
    return statements;
  }


  /**
   * Sets the value of the 'statements' field.
   * @param value the value to set.
   */
  public void setStatements(java.lang.String value) {
    this.statements = value;
  }

  /**
   * Creates a new DocConfigOp RecordBuilder.
   * @return A new DocConfigOp RecordBuilder
   */
  public static com.tsb.ods.sys.api.schema.DocConfigOp.Builder newBuilder() {
    return new com.tsb.ods.sys.api.schema.DocConfigOp.Builder();
  }

  /**
   * Creates a new DocConfigOp RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DocConfigOp RecordBuilder
   */
  public static com.tsb.ods.sys.api.schema.DocConfigOp.Builder newBuilder(com.tsb.ods.sys.api.schema.DocConfigOp.Builder other) {
    if (other == null) {
      return new com.tsb.ods.sys.api.schema.DocConfigOp.Builder();
    } else {
      return new com.tsb.ods.sys.api.schema.DocConfigOp.Builder(other);
    }
  }

  /**
   * Creates a new DocConfigOp RecordBuilder by copying an existing DocConfigOp instance.
   * @param other The existing instance to copy.
   * @return A new DocConfigOp RecordBuilder
   */
  public static com.tsb.ods.sys.api.schema.DocConfigOp.Builder newBuilder(com.tsb.ods.sys.api.schema.DocConfigOp other) {
    if (other == null) {
      return new com.tsb.ods.sys.api.schema.DocConfigOp.Builder();
    } else {
      return new com.tsb.ods.sys.api.schema.DocConfigOp.Builder(other);
    }
  }

  /**
   * RecordBuilder for DocConfigOp instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DocConfigOp>
    implements org.apache.avro.data.RecordBuilder<DocConfigOp> {

    private java.lang.String application;
    private java.lang.String correspondence;
    private java.lang.String statements;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.tsb.ods.sys.api.schema.DocConfigOp.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.application)) {
        this.application = data().deepCopy(fields()[0].schema(), other.application);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.correspondence)) {
        this.correspondence = data().deepCopy(fields()[1].schema(), other.correspondence);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.statements)) {
        this.statements = data().deepCopy(fields()[2].schema(), other.statements);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing DocConfigOp instance
     * @param other The existing instance to copy.
     */
    private Builder(com.tsb.ods.sys.api.schema.DocConfigOp other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.application)) {
        this.application = data().deepCopy(fields()[0].schema(), other.application);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.correspondence)) {
        this.correspondence = data().deepCopy(fields()[1].schema(), other.correspondence);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.statements)) {
        this.statements = data().deepCopy(fields()[2].schema(), other.statements);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'application' field.
      * @return The value.
      */
    public java.lang.String getApplication() {
      return application;
    }


    /**
      * Sets the value of the 'application' field.
      * @param value The value of 'application'.
      * @return This builder.
      */
    public com.tsb.ods.sys.api.schema.DocConfigOp.Builder setApplication(java.lang.String value) {
      validate(fields()[0], value);
      this.application = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'application' field has been set.
      * @return True if the 'application' field has been set, false otherwise.
      */
    public boolean hasApplication() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'application' field.
      * @return This builder.
      */
    public com.tsb.ods.sys.api.schema.DocConfigOp.Builder clearApplication() {
      application = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'correspondence' field.
      * @return The value.
      */
    public java.lang.String getCorrespondence() {
      return correspondence;
    }


    /**
      * Sets the value of the 'correspondence' field.
      * @param value The value of 'correspondence'.
      * @return This builder.
      */
    public com.tsb.ods.sys.api.schema.DocConfigOp.Builder setCorrespondence(java.lang.String value) {
      validate(fields()[1], value);
      this.correspondence = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'correspondence' field has been set.
      * @return True if the 'correspondence' field has been set, false otherwise.
      */
    public boolean hasCorrespondence() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'correspondence' field.
      * @return This builder.
      */
    public com.tsb.ods.sys.api.schema.DocConfigOp.Builder clearCorrespondence() {
      correspondence = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'statements' field.
      * @return The value.
      */
    public java.lang.String getStatements() {
      return statements;
    }


    /**
      * Sets the value of the 'statements' field.
      * @param value The value of 'statements'.
      * @return This builder.
      */
    public com.tsb.ods.sys.api.schema.DocConfigOp.Builder setStatements(java.lang.String value) {
      validate(fields()[2], value);
      this.statements = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'statements' field has been set.
      * @return True if the 'statements' field has been set, false otherwise.
      */
    public boolean hasStatements() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'statements' field.
      * @return This builder.
      */
    public com.tsb.ods.sys.api.schema.DocConfigOp.Builder clearStatements() {
      statements = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DocConfigOp build() {
      try {
        DocConfigOp record = new DocConfigOp();
        record.application = fieldSetFlags()[0] ? this.application : (java.lang.String) defaultValue(fields()[0]);
        record.correspondence = fieldSetFlags()[1] ? this.correspondence : (java.lang.String) defaultValue(fields()[1]);
        record.statements = fieldSetFlags()[2] ? this.statements : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DocConfigOp>
    WRITER$ = (org.apache.avro.io.DatumWriter<DocConfigOp>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DocConfigOp>
    READER$ = (org.apache.avro.io.DatumReader<DocConfigOp>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.application == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.application);
    }

    if (this.correspondence == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.correspondence);
    }

    if (this.statements == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.statements);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.application = null;
      } else {
        this.application = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.correspondence = null;
      } else {
        this.correspondence = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.statements = null;
      } else {
        this.statements = in.readString();
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.application = null;
          } else {
            this.application = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.correspondence = null;
          } else {
            this.correspondence = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.statements = null;
          } else {
            this.statements = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










